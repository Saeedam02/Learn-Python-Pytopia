Hash Function
A hash function is any function that can be used to map data of arbitrary size to fixed-size values. The values returned by a hash function are called hash values, hash codes, digests, or simply hashes. The values are usually used to index a fixed-size table called a hash table. Use of a hash function to index a hash table is called hashing or scatter storage addressing.

Hash functions and their associated hash tables are used in data storage and retrieval applications to access data in a small and nearly constant time per retrieval, and require an amount of storage space only fractionally greater than the total space required for the data or records themselves. Hashing is a computationally and storage space efficient form of data access which avoids the non-linear access time of ordered and unordered lists and structured trees.


Important properties:
Each hash is unique but always repeatable
The word 'cat' will hash to something that no other word hashes too, but it will always hash to the same thing.

The function is 'one way'.
If you are given the value of what 'cat' hashes too but you didn't know what made it, you would never be able to find out that 'cat' was the original word.

There are many different hash functions such as SHA-1 and SHA-2.


How Hash Table Works
Consider a list of items:

mylist = ["apple", "banana", "pear", "orange", "mango"]
To find an item in the list, one solution is brute force such as linear search which would take a very long time for a very big array.

But what if you know the index number of that element? You can look up the value very quick. The look up time is in face independent of the array size or the value position in the array.

But how can you know which index contains the value?

Answer: Each index can be calculated using the value itself so that the index number is in some way related to the data.


Collisions
You've seen how to load up a hash table with data that very conveniently didn't cause any problems. Needless to say, that was unrealistic. Sometimes if you apply a hash function to 2 different keys, it generates the same index number for both. This is known as collision.

Let's try the previous example but this time with a different set of data:

["Mia", "Tim", "Bea", "Zoe", "Sue", "Len", "Moe", "Lou", "Rae", "Max", "Tod"]

names = ["Mia", "Tim", "Bea", "Zoe", "Sue", "Len", "Moe", "Lou", "Rae", "Max", "Tod"]

print(f'{"Name":10} {"Hash Value"}')
print('-'*25)
for name in names:
    index = calc_hash(name, len(names))
    print(f'{name:10} {index}')

    Name       Hash Value
-------------------------
Mia        4
Tim        1
Bea        0
Zoe        5
Sue        4
Len        1
Moe        3
Lou        7
Rae        5
Max        8
Tod        9

Open Addressing
[_0_, _1_, _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
[_0_, "Tim", _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", "Zoe", _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", _3_, "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_]
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", "Max", _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", "Max", "Tod"] #Collision
Resolving a colllision by placing an item somewhere other than it's calculated address is called Open Addressing because every location is open to any item. Open addressing can use a variety of techniques to decide where to place an item that doesn't go where it should.

This particular open addressing techniques used above is called linear probing. If the calculated address is occupied, then a liner search is used to find the next available slot. If it goes to the end of the array and still does not find an empty space, it may cycle around to the beginning of the array and continue searching from there.

With the presence of collision, finding an item may need linear probing too, that is linear search.

One way to avoid collision is to make the array addresses biger that the total amount of data you're expecting, perhaps such that only 70% of the hash table is ever occupied.

 

Note: If the hash table is implemented as a resizable dynamic data structure, it could be made to increase in size automatically when the load factor reaches a certain threshold.Name       Hash Value
-------------------------
Mia        4
Tim        1
Bea        0
Zoe        5
Sue        4
Len        1
Moe        3
Lou        7
Rae        5
Max        8
Tod        9

Open Addressing
[_0_, _1_, _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
[_0_, "Tim", _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", "Zoe", _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", _3_, "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_]
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", "Max", _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", "Max", "Tod"] #Collision
Resolving a colllision by placing an item somewhere other than it's calculated address is called Open Addressing because every location is open to any item. Open addressing can use a variety of techniques to decide where to place an item that doesn't go where it should.

This particular open addressing techniques used above is called linear probing. If the calculated address is occupied, then a liner search is used to find the next available slot. If it goes to the end of the array and still does not find an empty space, it may cycle around to the beginning of the array and continue searching from there.

With the presence of collision, finding an item may need linear probing too, that is linear search.

One way to avoid collision is to make the array addresses biger that the total amount of data you're expecting, perhaps such that only 70% of the hash table is ever occupied.

 

Note: If the hash table is implemented as a resizable dynamic data structure, it could be made to increase in size automatically when the load factor reaches a certain threshold.Name       Hash Value
-------------------------
Mia        4
Tim        1
Bea        0
Zoe        5
Sue        4
Len        1
Moe        3
Lou        7
Rae        5
Max        8
Tod        9

Open Addressing
[_0_, _1_, _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
[_0_, "Tim", _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", _5_, _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", "Zoe", _6_, _7_, _8_, _9_, _10_]
["Bea", "Tim", _2_, _3_, "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", _3_, "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", _7_, _8_, _9_, _10_]
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", _8_, _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", _9_, _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", "Max", _10_] #Collision
["Bea", "Tim", "Len", "Moe", "Mia", "Zoe", "Sue", Lou", "Rae", "Max", "Tod"] #Collision
Resolving a colllision by placing an item somewhere other than it's calculated address is called Open Addressing because every location is open to any item. Open addressing can use a variety of techniques to decide where to place an item that doesn't go where it should.

This particular open addressing techniques used above is called linear probing. If the calculated address is occupied, then a liner search is used to find the next available slot. If it goes to the end of the array and still does not find an empty space, it may cycle around to the beginning of the array and continue searching from there.

With the presence of collision, finding an item may need linear probing too, that is linear search.

One way to avoid collision is to make the array addresses biger that the total amount of data you're expecting, perhaps such that only 70% of the hash table is ever occupied.

 

Note: If the hash table is implemented as a resizable dynamic data structure, it could be made to increase in size automatically when the load factor reaches a certain threshold.

for more details read :
https://github.com/pytopia/Python/blob/main/Python/01.%20Basics/10%20Under%20the%20Hood%2C%20Dictionary%20and%20Set.ipynb.ipynb




there is a library in python named : Watchedog /watchdog.events that can be used for observing somewhere.

////////////////////////// basics-List comprehension 
How to Create Lists in Python
There are a few different ways you can create lists in Python. To better understand the trade-offs of using a list comprehension in Python, letâ€™s first see how to create lists with these approaches.


Using for Loops
The most common type of loop is the for loop. You can use a for loop to create a list of elements in three steps:

Instantiate an empty list.
Loop over an iterable or range of elements.
Append each element to the end of the list.
If you want to create a list containing the first ten perfect squares, then you can complete these steps in three lines of code:

squares = []
for i in range(10):
    squares.append(i * i)
squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Here, you instantiate an empty list, squares. Then, you use a for loop to iterate over range(10). Finally, you multiply each number by itself and append the result to the end of the list.


**********************
Using map() Objects
map() provides an alternative approach thatâ€™s based in functional programming. You pass in a function and an iterable, and map() will create an object. This object contains the output you would get from running each iterable element through the supplied function.

As an example, consider a situation in which you need to calculate the price after tax for a list of transactions:

txns = [1.09, 23.56, 57.84, 4.56, 6.78]
TAX_RATE = .08
def get_price_with_tax(txn):
    return txn * (1 + TAX_RATE)
final_prices = map(get_price_with_tax, txns)
list(final_prices)
[1.1772000000000002, 25.4448, 62.467200000000005, 4.9248, 7.322400000000001]
Here, you have an iterable txns and a function get_price_with_tax(). You pass both of these arguments to map(), and store the resulting object in final_prices. You can easily convert this map object into a list using list().

*************************

Using List Comprehensions
List comprehensions are a third way of making lists. With this elegant approach, you could rewrite the for loop from the first example in just a single line of code:

squares = [i * i for i in range(10)]
squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Rather than creating an empty list and adding each element to the end, you simply define the list and its contents at the same time by following this format:

new_list = [expression for member in iterable]
Every list comprehension in Python includes three elements:

expression is the member itself, a call to a method, or any other valid expression that returns a value. In the example above, the expression i * i is the square of the member value.
member is the object or value in the list or iterable. In the example above, the member value is i.
iterable is a list, set, sequence, generator, or any other object that can return its elements one at a time. In the example above, the iterable is range(10).
Because the expression requirement is so flexible, a list comprehension in Python works well in many places where you would use map(). You can rewrite the pricing example with its own list comprehension:

for more details take a look at :
https://github.com/pytopia/Python/blob/main/Python/01.%20Basics/15%20List%20Comprehension.ipynb

################## programming Paradims
for this section, read from:
https://github.com/pytopia/Python/blob/main/Python/02.%20Object%20Oriented%20Programming/01%20Programming%20Paradigms.ipynb


######################3 composition
Compositionis an object oriented design concept that models a has a relationship. In composition, a class known as composite 
contains an object of another class known to as component. In other words, a composite class has a component of another class.

Composition allows composite classes to reuse the implementation of the components it contains. The composite class doesnâ€™t 
inherit the component class interface, but it can leverage its implementation.

The composition relation between two classes is considered loosely coupled. That means that changes to the component class rarely 
affect the composite class, and changes to the composite class never affect the component class. This provides better adaptability 
to change and allows applications to introduce new requirements without affecting existing code. When looking at two competing software designs, 
one based on inheritance and another based on composition, the composition solution usually is the most flexible. You can now look at how composition works.

for more details, take a look at :
https://github.com/pytopia/Python/blob/main/Python/02.%20Object%20Oriented%20Programming/06%20Composition.ipynb

##### Rule of thumb : __repr__ is for developers and __str__ is for costumers.
############ Multiple Inheritance 

for this section read :
https://github.com/pytopia/Python/blob/main/Python/02.%20Object%20Oriented%20Programming/07%20Multiple%20Inheritance.ipynb

Method Resolution Order
The method resolution order (or MRO) tells Python how to search for inherited methods. This comes in handy when youâ€™re using super() because the MRO tells you exactly where Python will look for a method youâ€™re calling with super() and in what order.

Every class has an .__mro__ attribute that allows us to inspect the order.

################# Overriding

for this section, read the following part:
https://github.com/pytopia/Python/blob/main/Python/02.%20Object%20Oriented%20Programming/08%20Overriding.ipynb

take a look at __bool__.

################## Data type attribute and method

num = 2
num.is_integer() # is a data type method
x = 2 + 3j
x.real # is a data type attribute

s = 'Saeed Aghamohammadi'
s.endswith('i) -> True
s.startswith('S') -> True
s.find('a') -> index of a is 1 # if it can't find index of a string, it return -1
s.index('a') -> 1 # by using index, if it can't find, it will return an error

s.rfind('a') -> it starts searching from right to left
s.rindex('a')

email = 'saeed008190@gmail.com'
email.replace('@gmail.com', '')
# for finding and searching in a string, we can us re library:
import rere.findall('a' , 'saeed008190@gmail.com')

a = '    \t  \n  '
a.isspace() -> True

text = '  saeed  '  it has spaces in both sides 
text.strip() -> it removes spaces from both sides.
text.lstrip() -> removes spaces from left side.
text.center(30,'*')
text.ljust(30) put text to left and put spaces in the right of that.

num = 23
num.zfill(5) -> 00023


my_list = ['saeed', 'Ali', 2]
# first way
new = [str(n)  for n in my_list]
#second way
new = map(str, my_list)

d1 = {'saeed' : 25, 'Ali' :23}
d2 = {'Mohammad' :24}

# first way of merging(not good because d1 will be changed)
d1.update(d2)

#second way
{**d1, **d2}

# third way
d1.update('Slar' = 30)

########set
s1 = {1,2,3}
s2 = {1,4,5,6}

s1.add(9)

s1.union(s2) or s1 | s2 -> {1,2,3,4,5,6}
# there is a small difference between union and | , for |, both side must be set but in union, second one can be any iterable.

s1.intersection(s2)  or s1 & s2 -> {1}

s1.difference(s2) or s1 - s2  -> {2,3}
 
s.symetric_difference(s2) or s1 ^ s2 -> {2,3,4,5,6}

{1,2}.issubset({1,2,3,4,5}) or {1,2} < {1,2,3,4} -> True

{1,2,3,4,5,6}.issuperset({1,2,3}) -> True

##################### Reading and writing files 

for details, read the following:
https://github.com/pytopia/Python/blob/main/Python/02.%20Object%20Oriented%20Programming/10.%20Reading%20and%20Writing%20Files.ipynb

for details about unicode, go to studying with alex YouTube channel and search for " unicode, in friendly terms"

################ Reading files
In Jopiter, ther is a comand for creating and writing in a file:
{
%%writefile myfile.txt
this is my file
saeed
}

################################## Module search Path #######################################
The resulting search path is accessible in the Python variable sys.path, which is obtained from a module named sys:

import sys
sys.path # note that sys.path is a list so we can append any diroctory to it.

for more information, take a look at :
https://github.com/pytopia/Python/blob/main/Python/03.%20Modular%20Programming/03%20Python%20Modules.ipynb

there is an environment variable in linux named PYTHONPATH which we can assign a diroctory for it till python search there after current working diroctory
by using the following command in terminal:
export PYTHONPATH='./diroctory name'

Thus, to ensure your module is found, you need to do one of the following:

Put mod.py in the directory where the input script is located or the current directory, if interactive

Modify the PYTHONPATH environment variable to contain the directory where mod.py is located before starting the interpreter* Or: Put mod.py in one of the directories already contained in the PYTHONPATH variable

Put mod.py in one of the installation-dependent directories, which you may or may not have write-access to, depending on the OS

When we use import name_of_madule there is a name space which we can just use modulename.method.
but when we use from name_of_madule import method_name, we can use method by itself without any name space.

imort math # here math is a nmae space which we can use it.
math.sum is available but sum isn't available by itself.

from math import sum
sum is available by itself.

from math import * # it will import everything from math. THis way of imorting isn't allowed in the functions local namespace.

try:
    # Non-existent module
    import baz
except ImportError:
    print('Module not found')

every modules have a dunder method named __file__ which is related to the path of that module.

### Module and script difference###
a name.py file which is executed by python command ( the source file that we start executing our codes) is a script and a .py file which is used in a script file is a module. note that we can execute.

inside of a modules it is usual to define classes and functions and printing something is unusual. or when we want to test a module, we can use assert.
for instance: if we have a module that add two things together we can use the following command to test it:
assert add(3,4) ==7
assert add('a','c') == 'ac'
is any of them was false, it will show an error.

for preventing that error or showing those prints, we can use the __name__ which is different when we run the module or we import it in script and run it from there.
we can use the following if statement:
if __name__ == '__main__':
    assert add(3,4) ==7
    assert add('a','c') == 'ac'
    print('Module is founded')


for reloading a module we can use:
import mod4 # imagine mod4 is a module.
import importlib
mod4 = importlib.reload(mod4)

Autoreload
You can also use an IPython extension to reload modules before executing user code. autoreload reloads modules automatically before entering the execution of code typed at the IPython prompt.

This makes for example the following workflow possible:

>>> %load_ext autoreload
>>> %autoreload 2
>>> from foo import some_function
>>> some_function()
# open foo.py in an editor and change some_function to return 43
>>> some_function()
43
The module was reloaded without reloading it explicitly, and the object imported with from foo import ... was also updated.

Usage: The following magic commands are provided:

%autoreload
Reload all modules (except those excluded by %aimport) automatically now.

%autoreload 0
Disable automatic reloading.

%autoreload 1
Reload all modules imported with %aimport every time before executing the Python code typed.

%autoreload 2
Reload all modules (except those excluded by %aimport) every time before executing the Python code typed.
%aimport
List modules which are to be automatically imported or not to be imported.

%aimport foo
Import module foo and mark it to be autoreloaded for %autoreload 1

%aimport -foo
Mark module foo to not be autoreloaded.

####### Note
Remember that importing everything from a module isn't suggested because it will put all things of module inside of global namespace.
from math import * ## not a good way.

Remember that when we import everything from a package, it doesn't do anything and doesn't put its modules and methods inside of global namespace.
But if we need to import some of package modules, we can use __all__ as a list inside of __init__.py file.
Note that this behaivier is the opposite of the __all__ behaiver in modules. in modules we can put methodes and constants which we want to import.( in modules it imports all methodes.)

** If a variable's name starts with _ , it doesn't appear in dir function afetr importing.

# There is a library in Github named retry that help you to rerun your code when it falis like when you are sending a request to a website.
you can install it with :
pip install retry

# here the link of that library's github:
https://github.com/invl/retry/blob/master/README.rst